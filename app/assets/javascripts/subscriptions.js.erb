document.addEventListener("DOMContentLoaded", (event) => {
  axios.defaults.headers.common = {
    'X-Requested-With': 'XMLHttpRequest',
    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
  };

  if ('serviceWorker' in navigator) {
    checkSubscription(navigator).then(hasSubscription => {
      if (hasSubscription === true) {
        // TODO: Refactor this to not post to the server with every page load
        // Could probably just save the session[:subscribed] value to a cookie
        axios.put('/users/session', {
          subscribed: true
        })
      } else {
        axios.put('/users/session', {
          subscribed: false
        })
      }
    })
  }

  $('#test-notification').on('click', (e) => {
    console.log('pushed!')
    navigator.serviceWorker.ready
      .then((serviceWorkerRegistration) => {
        serviceWorkerRegistration.pushManager.getSubscription()
          .then((subscription) => {
            axios.post('/push', {
              subscription: subscription.toJSON(),
              message: {
                "title": "You clicked a button!",
                "body": "Good job!"
              }
            });
          });
      });
  });
})

function checkSubscription(navigator) {
  return navigator.serviceWorker.ready
    .then((serviceWorkerRegistration) => {
      return serviceWorkerRegistration.pushManager.getSubscription()
        .then((subscription) => {
          return subscription != null;
        })
    });
}

function sendSubscriptionToServer(subscription) {
  axios.post('/subscribe', {
    subscription: subscription.toJSON(),
  })
  .then((data, status) => {
    console.log(data, status)
    $('#subscribe').text('Subscribed!');
    setTimeout(() => {
      location.reload()
    }, 500);
  })
}

function sendUnsubscriptionToServer(subscription) {
  axios.delete('/unsubscribe', {
    data: {
      subscription: subscription.toJSON(),
    }
  })
  .then((data, status) => {
    subscription.unsubscribe()
    console.log(data, status)
    $('#unsubscribe').text('Unsubscribed!');
    setTimeout(() => {
      location.reload()
    }, 500);
  })
}