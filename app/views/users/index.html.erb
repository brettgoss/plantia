<div class="container">
  <div class="row">
    <div class="twelve columns">
      <p>
        If there is anything you would like to see added to Plantia,
        feel free to email us suggestions at
        <%= mail_to "plantiapp@gmail.com", "plantiapp@gmail.com" ,subject: "Feature Suggestion:" %>
      </p>
    </div>
  </div>

  <div class="row">
    <div class="six columns">
      <div id="user-info">
        <div><h3>Hello, <%= @user.name %>.</h3></div>
        <ul>
          <div>You currently have:</div>
          <li><%= plant_count %>.</li>
          <li><%= subscriptions_count %>.</li>
        </ul>
      </div>

      <br />

      <div>
        <%= link_to 'Edit Account', edit_registration_path(@user), class: "button" %>
      </div>
    </div>

    <div class="six columns">
      <h2>Push Notifications</h2>

      <p>
        Click 'Subscribe' below to enable push notifications on this device.
        Notifications will be sent when one of your plants are 2 days past their water date.
      </p>

      <button id="subscribe" class="button hide">Subscribe to notifications</button>
      <button id="unsubscribe" class="button hide">Unsubscribe from notifications</button>
      <button id="test-notification" class="button hide">Send test notification</button>
    </div>
  </div>

  <script type="text/javascript">
    function sendSubscriptionToServer(subscription) {
      $.post('/subscribe', {
        subscription: subscription.toJSON(),
        user_id: <%= @user.id %>
      })
      .done((data, status) => {
        console.log(data, status)
        $('#subscribe').text('Subscribed!');
        setTimeout(() => {
          location.reload()
        }, 500);
      })
    }

    function unsubscribe(subscription) {
      $.ajax('/unsubscribe', {
        type: 'DELETE',
        data: {
          subscription: subscription.toJSON(),
          user_id: <%= @user.id %>
        }
      })
      .done(function(data, status) {
        subscription.unsubscribe()
        console.log(data, status)
        $('#unsubscribe').text('Unsubscribed!');
        setTimeout(() => {
          location.reload()
        }, 500);
      })
    }

    window.vapidPublicKey = new Uint8Array(<%= Base64.urlsafe_decode64(ENV['VAPID_PUBLIC_KEY']).bytes %>);

    $('#subscribe').on('click', (e) => {
      navigator.serviceWorker.ready
        .then((serviceWorkerRegistration) => {
          const options = {
            userVisibleOnly: true,
            applicationServerKey: window.vapidPublicKey
          }

          serviceWorkerRegistration.pushManager.subscribe(options)
            .then(pushSubscription => sendSubscriptionToServer(pushSubscription))
            .catch(error => console.warn("There was an subscribing: ", error))
        })
    });

    $('#unsubscribe').on('click', (e) => {
      navigator.serviceWorker.ready
        .then((serviceWorkerRegistration) => {
          serviceWorkerRegistration.pushManager.getSubscription()
            .then(subscription => unsubscribe(subscription))
            .catch(error => console.warn("There was an subscribing: ", error))
        });
    });
  </script>
</div>